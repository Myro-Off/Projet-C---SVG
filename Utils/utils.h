/**
 * @file utils.h
 * @brief Fonctions utilitaires pour la gestion du terminal, de la saisie utilisateur et de l‚Äôaffichage color√©.
 * 
 * Ce module regroupe diverses fonctions d‚Äôaide utilis√©es dans le programme, notamment :
 * - la manipulation du terminal (curseur, mode canonique, affichage lent),
 * - la validation et saisie des entr√©es utilisateur,
 * - la gestion des couleurs ANSI et des messages temporis√©s.
 * 
 * Il d√©finit √©galement des macros pour l‚Äôaffichage color√© dans le terminal
 * et plusieurs fonctions de confort pour le rendu et l‚Äôinteraction utilisateur.
 */

#ifndef UTILS_H
#define UTILS_H

#include <stdbool.h>
#include "structures.h"

// ============================================================================
// üé® COULEURS ANSI
// ============================================================================
/**
 * @name Couleurs ANSI
 * @brief Macros pour afficher du texte color√© et stylis√© dans le terminal.
 * @{
 */
#define RED     "\033[31m"
#define CORAL   "\033[38;2;255;80;80m"
#define GREEN   "\033[32m"
#define BLUE    "\033[38;2;4;140;224m"
#define SEA     "\033[38;2;96;144;247m"
#define YELLOW  "\033[38;2;255;213;0m"
#define ORANGE  "\033[38;2;255;165;0m"
#define PURPLE  "\033[38;2;128;0;128m"
#define PINK    "\033[38;2;255;192;203m"
#define BROWN   "\033[38;2;165;42;42m"
#define GRAY    "\033[30m"
#define CYAN    "\033[36m"
#define MAGENTA "\033[35m"
#define WHITE   "\033[97m"
#define BOLD    "\033[1m"

#define BG_BLUE      "\033[44m"
#define BG_LIGHTBLUE "\033[104m"
#define BG_DARKBLUE  "\033[48;5;18m"
#define BG_CYAN      "\033[48;5;44m"
#define BG_RESET     "\033[49m"
#define RESET        "\033[0m"
#define FOREST       "\033[38;2;34;139;34m"
#define BLINK        "\033[5m"
/** @} */

// ============================================================================
// üé® TABLEAU DES COULEURS STANDARD
// ============================================================================
/**
 * @brief Tableau des couleurs SVG standard accept√©es par le programme.
 */
extern const char* standard_color[];

/**
 * @brief Nombre total de couleurs standard dans le tableau `standard_color`.
 */
extern const int nb_standard_color;

// ============================================================================
// üîß FONCTIONS UTILITAIRES G√âN√âRALES
// ============================================================================

/**
 * @brief Vide le buffer d‚Äôentr√©e standard (`stdin`).
 * 
 * Supprime les caract√®res r√©siduels laiss√©s apr√®s une saisie incorrecte,
 * √©vitant que des retours √† la ligne non consomm√©s perturbent la saisie suivante.
 */
void empty_buffer();

/**
 * @brief Retourne le nom lisible d‚Äôun type de forme.
 * @param type Type de la forme (`ShapeType`)
 * @return Cha√Æne repr√©sentant le nom de la forme (ex : `"Circle"`, `"Rectangle"`, ‚Ä¶)
 */
const char* get_shape_type(ShapeType type);

/**
 * @brief V√©rifie si une cha√Æne correspond √† un code couleur hexad√©cimal valide (#RRGGBB).
 * @param s Cha√Æne √† v√©rifier.
 * @return `true` si le code est valide, `false` sinon.
 */
bool is_hex(const char* s);

/**
 * @brief V√©rifie si une cha√Æne correspond √† une couleur SVG standard connue.
 * @param s Cha√Æne √† v√©rifier.
 * @return `true` si la couleur est dans la liste `standard_color`, `false` sinon.
 */
bool is_standard_color(const char* s);

/**
 * @brief V√©rifie si une couleur est valide pour le programme.
 * 
 * Une couleur est consid√©r√©e valide si elle est :
 * - un code hexad√©cimal (#RRGGBB),
 * - ou une couleur standard connue.
 * 
 * @param s Cha√Æne repr√©sentant la couleur.
 * @return `true` si la couleur est valide, `false` sinon.
 */
bool valid_color(const char* s);

/**
 * @brief Affiche temporairement un message dans le terminal, puis l‚Äôefface apr√®s un d√©lai donn√©.
 * 
 * @param msg Message √† afficher.
 * @param n Nombre de lignes √† effacer apr√®s le d√©lai.
 * @param seconds Dur√©e d‚Äôaffichage en secondes.
 */
void temp_message(const char* msg, int n, int seconds);

/**
 * @brief Active le mode ‚Äúnon canonique‚Äù du terminal (bloque la validation par Entr√©e).
 * 
 * Permet de lire les caract√®res en direct, sans attendre la touche Entr√©e,
 * et d√©sactive √©galement l‚Äô√©cho des touches.
 */
void block_enter();

/**
 * @brief Restaure le mode normal du terminal apr√®s `block_enter`.
 */
void unblock_enter();

/**
 * @brief Affiche du texte caract√®re par caract√®re avec un d√©lai.
 * 
 * Utile pour des effets d‚Äôaffichage anim√©s.
 * 
 * @param text Texte √† afficher.
 * @param delay_us D√©lai entre chaque caract√®re (en microsecondes).
 */
void slow_print(const char *text, int delay_us);

/**
 * @brief D√©place le curseur du terminal √† une position donn√©e.
 * 
 * @param row Ligne cible (commence √† 1).
 * @param col Colonne cible (commence √† 1).
 */
void move_cursor(int row, int col);

// ============================================================================
// ‚å®Ô∏è SAISIES UTILISATEUR
// ============================================================================

/**
 * @brief Lit un entier saisi par l‚Äôutilisateur avec contr√¥le pr√©cis.
 * 
 * Permet la saisie directe (sans validation par Entr√©e) et g√®re :
 * - le retour arri√®re (‚å´),
 * - les bornes num√©riques,
 * - les annulations.
 * 
 * @param result Pointeur vers la variable o√π stocker le r√©sultat.
 * @param prompt Message d‚Äôinvite.
 * @param max_digits Nombre maximum de chiffres autoris√©s.
 * @param min_digit_value Valeur minimale d‚Äôun chiffre.
 * @param max_digit_value Valeur maximale d‚Äôun chiffre.
 * @param allow_negative Indique si les nombres n√©gatifs sont autoris√©s.
 * 
 * @return Code d‚Äô√©tat (`INPUT_SUCCESS`, `INPUT_CANCEL`, `INPUT_INVALID`).
 */
InputStatus get_integer(int *result, const char *prompt, int max_digits, int min_digit_value, int max_digit_value, bool allow_negative);

/**
 * @brief G√®re la saisie d‚Äôune couleur utilisateur (hexad√©cimale ou standard).
 * 
 * @param result Cha√Æne o√π sera stock√©e la couleur saisie.
 * @param prompt Message d‚Äôinvite √† afficher.
 * 
 * @return Code d‚Äô√©tat (`INPUT_SUCCESS`, `INPUT_CANCEL`, `INPUT_INVALID`).
 */
InputStatus get_color(char* result, const char* prompt);

/**
 * @brief G√®re les erreurs ou annulations pendant la cr√©ation d‚Äôun √©l√©ment.
 * 
 * Affiche un message de confirmation ou d‚Äôerreur et d√©termine
 * si la cr√©ation doit √™tre annul√©e.
 * 
 * @param status Statut d‚Äôentr√©e retourn√© par une fonction pr√©c√©dente.
 * @return `true` si la cr√©ation est annul√©e, `false` sinon.
 */
bool creation_error(InputStatus status);

/**
 * @brief Attend une confirmation utilisateur sous la forme d‚Äôun caract√®re (`Y`/`N`).
 * 
 * @param result Pointeur o√π stocker le caract√®re (`Y`, `N`, `y`, `n`).
 * @param prompt Message d‚Äôinvite.
 * @return Code d‚Äô√©tat (`INPUT_SUCCESS` ou `INPUT_CANCEL`).
 */
InputStatus get_confirmation_char(char *result, const char *prompt);

// ============================================================================
// üìä AFFICHAGE VISUEL
// ============================================================================

/**
 * @brief Dessine une barre de progression anim√©e dans le terminal.
 * 
 * @param fraction Fraction d‚Äôavancement (entre `0.0` et `1.0`).
 */
void draw_progress(double fraction);

#endif